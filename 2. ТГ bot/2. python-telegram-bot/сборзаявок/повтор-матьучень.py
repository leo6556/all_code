from telegram import Update
from telegram import ParseMode
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup

from telegram.ext import Updater
from telegram.ext import CallbackContext
from telegram.ext import MessageHandler
from telegram.ext import ConversationHandler
from telegram.ext import CommandHandler
from telegram.ext import Filters
from telegram.ext import CallbackQueryHandler
import time

from pprint import pprint
import httplib2
import apiclient
from oauth2client.service_account import ServiceAccountCredentials

CRED_FILE = 'creds.json'
spreadsheets_id = '1DjGp4T1w_ChKieeLKbrNJVFkP6MTwlBbSHiT5u6zeik'

credentials = ServiceAccountCredentials.from_json_keyfile_name(
    CRED_FILE,
    [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive'])
httpAuth = credentials.authorize(httplib2.Http())
service = apiclient.discovery.build('sheets', 'v4', http = httpAuth)

DATE, POINT, GENDER, TIME = 0,1,2,4

def echo(update: Update, context: CallbackContext):
    update.message.reply_text(text='–ø—Ä–∏–≤–µ—Ç, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, –≤–±–µ–π –∫–æ–º–∞–Ω–¥—É "/start"')

def start(update: Update, context: CallbackContext):

    text = [
        '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫)',
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã 'Beauty Girls'! üòÅ ",
        '',
        '–ë—É–∫–≤–∞–ª—å–Ω–æ –∑–∞ –º–∏–Ω—É—Ç—É —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É, –∞ —Ç–∞–∫–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã ü§ì',
        "",
        '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é:',
        '/sigh_up -- –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º',
        '/price -- —Ü–µ–Ω—ã –Ω–∞ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏',
        "/my_orders -- –º–æ–∏ –∑–∞–∫–∞–∑—ã",
        "/help -- –ø–æ–º–æ—â—å"

    ]

    update.message.reply_text(text='\n'.join(text),
                              parse_mode=ParseMode.MARKDOWN)

def markup_base():
    keyboard = [
        [
            InlineKeyboardButton('–°—Ç—Ä–∏–∂–∫–∞', callback_data='haircut'),
            InlineKeyboardButton('–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ', callback_data='hair')
        ],
        [
            InlineKeyboardButton('–õ–∏—Ü–æ', callback_data='face'),
            InlineKeyboardButton('–ú–∞–Ω–∏–∫—é—Ä', callback_data='manicure')
        ],
        [
            InlineKeyboardButton('–ü–µ–¥–∏–∫—é—Ä', callback_data='pedicure')
        ],
    ]
    return InlineKeyboardMarkup(keyboard)

def markup_base2():
    keyboard = [
        [
            InlineKeyboardButton('–°—Ç—Ä–∏–∂–∫–∞', callback_data='haircut2'),
            InlineKeyboardButton('–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ', callback_data='hair2')
        ],
        [
            InlineKeyboardButton('–õ–∏—Ü–æ', callback_data='face2'),
            InlineKeyboardButton('–ú–∞–Ω–∏–∫—é—Ä', callback_data='manicure2')
        ],
        [
            InlineKeyboardButton('–ü–µ–¥–∏–∫—é—Ä', callback_data='pedicure2')
        ],
    ]
    return InlineKeyboardMarkup(keyboard)

def markupDate():
    b = time.asctime()
    c = int(b[7:10])
    k = b[4:7]


    # f = values['values'][0].index(str(c))
    # print(f)

    month = {'Sep':'—Å–µ–Ω', 'Oct':'–æ–∫—Ç', 'Nov':'–Ω–æ—è–±', 'Dec':'–¥–µ–∫', 'Jan':'—è–Ω–≤', 'Feb':'—Ñ–µ–≤', 'Mar':'–º–∞—Ä','Apr':'–∞–ø—Ä', 'May':'–º–∞—è', 'Jun':'–∏—é–Ω',
             'Jul':'–∏—é–ª','Aug':'–∞–≤–≥'}
    month2 = {'Sep': '–æ–∫—Ç', 'Oct': '–Ω–æ—è–±', 'Nov': '–¥–µ–∫', 'Dec': '—è–Ω–≤', 'Jan': '—Ñ–µ–≤', 'Feb': '–º–∞—Ä', 'Mar': '–∞–ø—Ä',
             'Apr': '–º–∞—è', 'May': '–∏—é–Ω', 'Jun': '–∏—é–ª',
             'Jul': '–∞–≤–≥', 'Aug': '—Å–µ–Ω'}
    values = [5,6,7,5,4,3,2,2,4,5,6,7,8,9,0,8,7,6,4,5,56,76,7,8,8,8,7,7,6,5,5,45,4,9]

    if c <= 23:
        keyboard = [
            [
                InlineKeyboardButton(f"{b} {month[k]}", callback_data=f'{b}') for b in values[c:c + 4]
            ],
            [
                InlineKeyboardButton(f"{b} {month[k]}", callback_data=f'{b}') for b in values[c + 4:c + 8]
            ],

        ]
    elif c >= 27:

        keyboard = [
            [
                InlineKeyboardButton(f"{b} {month[k]}", callback_data=f'{b}') for b in values['values'][0][c:]

            ],
            [
                InlineKeyboardButton(f"{p} {month2[k]}", callback_data=f'{b}') for p in values['values'][0][:4]
            ],

        ]
    else:

        keyboard = [
            [
                InlineKeyboardButton(f"{b} {month2[k]}", callback_data=f'{b}') for b in values['values'][0][c:c+4]

            ],
            [
                InlineKeyboardButton(f"{p} –æ–∫—Ç", callback_data=f'{p}') for p in values['values'][0][c+6:]
            ],
        ]


    return InlineKeyboardMarkup(keyboard)

def markup_back():
    keyboard = [
        [
            InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def price_list(update: Update, context: CallbackContext):
    update.message.reply_text('–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üòä',
                              reply_markup=markup_base())

def callback(update:Update, context:CallbackContext):
    query = update.callback_query
    data = query.data
    current_text = update.effective_message.text

    if data == 'haircut':

        query.edit_message_text('''
–°—Ç—Ä–∏–∂–∫–∞ -- 2400,
–°—Ç—Ä–∏–∂–∫–∞ —á–µ–ª–∫–∏ -- 800,
–ü–æ–¥—Ä–æ–≤–Ω—è—Ç—å –∫–æ–Ω—á–∏–∫–∏ -- 1200,

–ú–æ–¥–µ–ª—å–Ω–∞—è —É–∫–ª–∞–¥–∫–∞ -- 1800''',
                                reply_markup=markup_back())
    elif data == 'back':
        query.edit_message_text('–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üòä',
                              reply_markup=markup_base())
    elif data == 'hair':
        query.edit_message_text('''
        –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤ –æ–¥–∏–Ω —Ç–æ–Ω -- 4500,
*–û–∫—Ä–∞—à–∏*–≤–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–π -- 3200,
–¢–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ -- 2000''',
                                reply_markup=markup_back(),
                                parse_mode=ParseMode.MARKDOWN)
    elif data == 'face':
        query.edit_message_text('''
        –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–∫–∏—è–∂ -- 2500,
–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è —á–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞ - 3000,
–ü–∏–ª–∏–Ω–≥ -- 1800''',
                                reply_markup=markup_back())
    elif data == 'manicure':
        query.edit_message_text('''
        –ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–∫–µ—Å–∫–∏–π - 850,
–ú–∞–Ω–∏–∫—é—Ä –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–π -- 1250,
–ø–æ–∫—Ä—ã—Ç–∏–µ - 900,
—Å–Ω—è—Ç–∏–µ - 150''',
                                reply_markup=markup_back())
    elif data == 'pedicure':
        query.edit_message_text('''
        –ü–µ–¥–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π -- 1600,
–ü–µ–¥–∏–∫—é—Ä –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–π -- 1800,
–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–æ—Å—à–µ–≥–æ –Ω–æ–≥—Ç—è -- 1300''',
                                reply_markup=markup_back())

    if data[-3:] == 'end':
        b = time.asctime()
        c = int(b[7:10])

        query.edit_message_text('–í—ã–±–µ—Ä—Ç–µ —É–¥–æ–±–Ω—É—é –≤–∞–º –¥–∞—Ç—É:',
                                  reply_markup=markupDate())



def start_conv(update:Update, context:CallbackContext):

    update.message.reply_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É',
        reply_markup=markup_base2()
    )
    return POINT

def date_han(update:Update, context:CallbackContext):

    point = update.callback_query.data
    print(point)

    context.user_data[POINT] = point

    chat_id = update.callback_query.message.chat_id

    update.callback_query.edit_message_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π—Ü –¥–ª—è –≤–∞—Å –¥–µ–Ω—å:',
        reply_markup=markupDate()
    )
    return TIME


def time_han(update:Update, context:CallbackContext):
    callback_data = update.callback_query.data
    print(callback_data)
    context.user_data[DATE] = callback_data


def cancel_han(update:Update, context:CallbackContext):
    pass

def main():
    updater = Updater(
        token='1927368703:AAFL5cNCFbkmxKYoGCQZXybrB_I49SdQbOA')

#1932460705:AAGmuy7377SjrfKuner8vFt4PLbktHktzWA

    conv_han = ConversationHandler(
        entry_points= [
            CommandHandler('sighup', start_conv)
        ],
        states= {
            POINT: [
                CallbackQueryHandler(date_han)
            ],
            TIME: [
                CallbackQueryHandler(time_han)
            ]
        },
        fallbacks= [
            CommandHandler('cancel', cancel_han)
        ]

    )

    updater.dispatcher.add_handler(conv_han)

    updater.dispatcher.add_handler(CommandHandler('start', start))
    updater.dispatcher.add_handler(CommandHandler('price', price_list))

    updater.dispatcher.add_handler(MessageHandler(Filters.all, echo))
    updater.dispatcher.add_handler(CallbackQueryHandler(callback=callback))

    updater.start_polling()
    updater.idle()



if __name__ == '__main__':
    main()